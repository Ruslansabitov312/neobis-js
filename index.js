for (var i = 0; i < 10; i++) {
  setTimeout(function() {
    console.log(i)
  })
}

// ВЫВОД: 10 раз 10 в консоль.

// Цикл for (var i = 0; i < 10; i++) {}
// var i = 0 - начальное значение счетчика.
// i < 10 - условие цикла, тело цикла работает до тех пор, пока условие возвращает true.
// i++(i = i + 1) - шаг, увеличивается на 1 после каждой итерации.(Итерация - одно полное выполнение цикла)
// console.log(i) - тело цикла.

// setTimeout() - конструкция которая позволяет запускать функцию через определенное время. Первым параметром принимает анонимную callback функцию (можно и осознанную) и вторым время в милясекундах, через какое время запускать. Но после указания времени можно давать следующие аргументы которые явл-я аргументами функции.

// Анонимная функция сохраняет лишь ссылку на i, и когда будет вызвана функция console.log, цикл for уже закончит свою работу — и поэтому в переменной i будет покоиться значение 10.

// То есть сначала цикл будет закончен, следовательно i выставлено в 10, а потом через 1 секунду вызовется 10 раз функция из замыкания в setTimeout().

// Вспоминаем "Замыкание":

function createCounter() {                      // создаем функцию
  let counter = 0                               // в ней создаем переменную

  const myFunction = function() {               // из этой функ. вернем другую функцию
    counter = counter + 1     // исп. эту пер. во влож. функции(замкнет знач. верх. скоупа )
    return counter                            
  }

  return myFunction                           
}

const increment = createCounter()
const c1 = increment() // 1
const c2 = increment() // 2
const c3 = increment() // 3
const c4 = increment() // 4
//сколько бы раз "верхнеуровневую функцию" не вызывали она внутри себя будет "замыкать" как бы новое значение но при этом "дочерняя функция" она будет использовать переменную именно из выщестоящего скоупа верхней функции.
// Область видимости(scope) – это некоторая сущность JavaScript, которая определяет границы действия переменных. Создаются области видимости во время выполнения программы
console.log(c1, c2, c3, c4)

// Замыкание - механизм с помощью которого мы можем в рамках какой-то функции замкнуть какое-то значение и использовать ее в функции которая где-то у нас внутри используется.
// Мы можем создать одну функцию, в ней создать какую-то переменную, из этой функции вернуть другую функцию, и эту переменную использовать внутри "вложенной функции" и она замкнет в себе значение вот как раз функции вышестоящего скоупа и при этом сколько бы раз мы вот эту "верхнеуровневую функцию" не вызывали она внутри себя будет "замыкать" как бы новое значение но при этом "дочерняя функция" она будет использовать переменную именно из выщестоящего скоупа верхней функции.
// Кратко: Замыкание - это сама функция вместе со всеми внешними переменными которые ей доступны.
// Функция которая запоминает "ссылку" на свои внешние переменные которые были в области видимости во время создания этой функции и может получить к ним доступ.